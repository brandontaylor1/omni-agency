<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/auth/register/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/auth/register/page.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import Link from 'next/link';&#10;import { useRouter } from 'next/navigation';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { Label } from '@/components/ui/label';&#10;import { supabase } from '@/lib/supabase/client';&#10;&#10;export default function RegisterPage() {&#10;  const router = useRouter();&#10;  const [firstName, setFirstName] = useState('');&#10;  const [lastName, setLastName] = useState('');&#10;  const [email, setEmail] = useState('');&#10;  const [password, setPassword] = useState('');&#10;  const [orgName, setOrgName] = useState('');&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [isLoading, setIsLoading] = useState(false);&#10;&#10;  const handleRegister = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    setIsLoading(true);&#10;    setError(null);&#10;&#10;    if (!firstName.trim() || !lastName.trim()) {&#10;      setError('First and last name are required');&#10;      setIsLoading(false);&#10;      return;&#10;    }&#10;&#10;    if (!orgName.trim()) {&#10;      setError('Organization name is required');&#10;      setIsLoading(false);&#10;      return;&#10;    }&#10;&#10;    try {&#10;      // 1. Register the user&#10;      const { data: authData, error: authError } = await supabase.auth.signUp({&#10;        email,&#10;        password,&#10;        options: {&#10;          data: {&#10;            first_name: firstName,&#10;            last_name: lastName,&#10;            org_name: orgName,&#10;            full_name: `${firstName} ${lastName}`&#10;          },&#10;        },&#10;      });&#10;&#10;      if (authError) throw authError;&#10;&#10;      if (authData.user) {&#10;        // 2. Create the organization and set user as owner using server action&#10;        // This will call the API route that uses the service role key&#10;        const orgSlug = orgName&#10;          .toLowerCase()&#10;          .replace(/[^a-z0-9]/g, '-')&#10;          .replace(/-+/g, '-')&#10;          .replace(/^-|-$/g, '');&#10;&#10;        // Using fetch to call the API route that will use service role permissions&#10;        const response = await fetch('/api/organizations/create', {&#10;          method: 'POST',&#10;          headers: {&#10;            'Content-Type': 'application/json',&#10;          },&#10;          body: JSON.stringify({&#10;            name: orgName,&#10;            slug: orgSlug,&#10;            userId: authData.user.id,&#10;            firstName,&#10;            lastName,&#10;            email&#10;          }),&#10;        });&#10;&#10;        if (!response.ok) {&#10;          const errorData = await response.json();&#10;          throw new Error(errorData.message || 'Failed to create organization');&#10;        }&#10;&#10;        router.push('/auth/verify');&#10;      }&#10;    } catch (err: any) {&#10;      setError(err.message || 'An error occurred during registration');&#10;      console.error('Registration error:', err);&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;flex min-h-screen flex-col items-center justify-center px-4 py-8&quot;&gt;&#10;      &lt;div className=&quot;w-full max-w-md space-y-8&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold&quot;&gt;Create an account&lt;/h1&gt;&#10;          &lt;p className=&quot;mt-2 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#10;            Enter your details to get started&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;        &lt;form className=&quot;space-y-4&quot; onSubmit={handleRegister}&gt;&#10;          {error &amp;&amp; (&#10;            &lt;div className=&quot;rounded-md bg-red-50 p-4 text-sm text-red-500 dark:bg-red-900/30 dark:text-red-200&quot;&gt;&#10;              {error}&#10;            &lt;/div&gt;&#10;          )}&#10;          &lt;div className=&quot;space-y-1&quot;&gt;&#10;            &lt;Label htmlFor=&quot;organization&quot;&gt;Organization Name&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;organization&quot;&#10;              placeholder=&quot;Your Agency Name&quot;&#10;              disabled={isLoading}&#10;              value={orgName}&#10;              onChange={(e) =&gt; setOrgName(e.target.value)}&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-1&quot;&gt;&#10;              &lt;Label htmlFor=&quot;firstName&quot;&gt;First Name&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;firstName&quot;&#10;                placeholder=&quot;John&quot;&#10;                disabled={isLoading}&#10;                value={firstName}&#10;                onChange={(e) =&gt; setFirstName(e.target.value)}&#10;                required&#10;              /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;space-y-1&quot;&gt;&#10;              &lt;Label htmlFor=&quot;lastName&quot;&gt;Last Name&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;lastName&quot;&#10;                placeholder=&quot;Doe&quot;&#10;                disabled={isLoading}&#10;                value={lastName}&#10;                onChange={(e) =&gt; setLastName(e.target.value)}&#10;                required&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;space-y-1&quot;&gt;&#10;            &lt;Label htmlFor=&quot;email&quot;&gt;Email&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;email&quot;&#10;              type=&quot;email&quot;&#10;              placeholder=&quot;name@example.com&quot;&#10;              autoCapitalize=&quot;none&quot;&#10;              autoComplete=&quot;email&quot;&#10;              autoCorrect=&quot;off&quot;&#10;              disabled={isLoading}&#10;              value={email}&#10;              onChange={(e) =&gt; setEmail(e.target.value)}&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;space-y-1&quot;&gt;&#10;            &lt;Label htmlFor=&quot;password&quot;&gt;Password&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;password&quot;&#10;              type=&quot;password&quot;&#10;              autoCapitalize=&quot;none&quot;&#10;              autoComplete=&quot;new-password&quot;&#10;              autoCorrect=&quot;off&quot;&#10;              disabled={isLoading}&#10;              value={password}&#10;              onChange={(e) =&gt; setPassword(e.target.value)}&#10;              required&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button&#10;            className=&quot;w-full&quot;&#10;            type=&quot;submit&quot;&#10;            disabled={isLoading}&#10;          &gt;&#10;            {isLoading ? 'Creating account...' : 'Create Account'}&#10;          &lt;/Button&gt;&#10;        &lt;/form&gt;&#10;        &lt;div className=&quot;mt-4 text-center text-sm&quot;&gt;&#10;          Already have an account?{' '}&#10;          &lt;Link&#10;            href=&quot;/auth/login&quot;&#10;            className=&quot;text-primary hover:underline underline-offset-4&quot;&#10;          &gt;&#10;            Sign in&#10;          &lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import { useState } from 'react';&#13;&#10;import Link from 'next/link';&#13;&#10;import { useRouter } from 'next/navigation';&#13;&#10;import { Button } from '@/components/ui/button';&#13;&#10;import { Input } from '@/components/ui/input';&#13;&#10;import { Label } from '@/components/ui/label';&#13;&#10;import { supabase } from '@/lib/supabase/client';&#13;&#10;&#13;&#10;export default function RegisterPage() {&#13;&#10;  const router = useRouter();&#13;&#10;  const [firstName, setFirstName] = useState('');&#13;&#10;  const [lastName, setLastName] = useState('');&#13;&#10;  const [email, setEmail] = useState('');&#13;&#10;  const [password, setPassword] = useState('');&#13;&#10;  const [orgName, setOrgName] = useState('');&#13;&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#13;&#10;  const [isLoading, setIsLoading] = useState(false);&#13;&#10;&#13;&#10;  const handleRegister = async (e: React.FormEvent) =&gt; {&#13;&#10;    e.preventDefault();&#13;&#10;    setIsLoading(true);&#13;&#10;    setError(null);&#13;&#10;&#13;&#10;    if (!firstName.trim() || !lastName.trim()) {&#13;&#10;      setError('First and last name are required');&#13;&#10;      setIsLoading(false);&#13;&#10;      return;&#13;&#10;    }&#13;&#10;&#13;&#10;    if (!orgName.trim()) {&#13;&#10;      setError('Organization name is required');&#13;&#10;      setIsLoading(false);&#13;&#10;      return;&#13;&#10;    }&#13;&#10;&#13;&#10;    try {&#13;&#10;      // 1. Register the user&#13;&#10;      const { data: authData, error: authError } = await supabase.auth.signUp({&#13;&#10;        email,&#13;&#10;        password,&#13;&#10;        options: {&#13;&#10;          data: {&#13;&#10;            first_name: firstName,&#13;&#10;            last_name: lastName,&#13;&#10;            org_name: orgName,&#13;&#10;            full_name: `${firstName} ${lastName}`&#13;&#10;          },&#13;&#10;        },&#13;&#10;      });&#13;&#10;&#13;&#10;      if (authError) throw authError;&#13;&#10;&#13;&#10;      if (authData.user) {&#13;&#10;        // 2. Check for pending invitation&#13;&#10;        const { data: invitation, error: invitationError } = await supabase&#13;&#10;          .from('organization_invitations')&#13;&#10;          .select('*')&#13;&#10;          .eq('email', email)&#13;&#10;          .is('accepted_at', null)&#13;&#10;          .gt('expires_at', new Date().toISOString())&#13;&#10;          .single();&#13;&#10;&#13;&#10;        if (invitation &amp;&amp; !invitationError) {&#13;&#10;          // Join existing organization with specified role&#13;&#10;          await supabase.from('org_members').insert({&#13;&#10;            org_id: invitation.org_id,&#13;&#10;            user_id: authData.user.id,&#13;&#10;            role: invitation.role,&#13;&#10;            invited_by: invitation.invited_by,&#13;&#10;            invited_at: invitation.created_at,&#13;&#10;            joined_at: new Date().toISOString(),&#13;&#10;          });&#13;&#10;          // Mark invitation as accepted&#13;&#10;          await supabase.from('organization_invitations').update({&#13;&#10;            accepted_at: new Date().toISOString()&#13;&#10;          }).eq('id', invitation.id);&#13;&#10;          router.push('/auth/verify');&#13;&#10;          return;&#13;&#10;        }&#13;&#10;&#13;&#10;        // 3. No invitation: create new organization and set user as owner&#13;&#10;        const orgSlug = orgName&#13;&#10;          .toLowerCase()&#13;&#10;          .replace(/[^a-z0-9]/g, '-')&#13;&#10;          .replace(/-+/g, '-')&#13;&#10;          .replace(/^-|-$/g, '');&#13;&#10;&#13;&#10;        const response = await fetch('/api/organizations/create', {&#13;&#10;          method: 'POST',&#13;&#10;          headers: {&#13;&#10;            'Content-Type': 'application/json',&#13;&#10;          },&#13;&#10;          body: JSON.stringify({&#13;&#10;            name: orgName,&#13;&#10;            slug: orgSlug,&#13;&#10;            userId: authData.user.id,&#13;&#10;            firstName,&#13;&#10;            lastName,&#13;&#10;            email&#13;&#10;          }),&#13;&#10;        });&#13;&#10;&#13;&#10;        if (!response.ok) {&#13;&#10;          const errorData = await response.json();&#13;&#10;          throw new Error(errorData.message || 'Failed to create organization');&#13;&#10;        }&#13;&#10;&#13;&#10;        router.push('/auth/verify');&#13;&#10;      }&#13;&#10;    } catch (err: any) {&#13;&#10;      setError(err.message || 'An error occurred during registration');&#13;&#10;      console.error('Registration error:', err);&#13;&#10;    } finally {&#13;&#10;      setIsLoading(false);&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;flex min-h-screen flex-col items-center justify-center px-4 py-8&quot;&gt;&#13;&#10;      &lt;div className=&quot;w-full max-w-md space-y-8&quot;&gt;&#13;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#13;&#10;          &lt;h1 className=&quot;text-3xl font-bold&quot;&gt;Create an account&lt;/h1&gt;&#13;&#10;          &lt;p className=&quot;mt-2 text-sm text-gray-500 dark:text-gray-400&quot;&gt;&#13;&#10;            Enter your details to get started&#13;&#10;          &lt;/p&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;        &lt;form className=&quot;space-y-4&quot; onSubmit={handleRegister}&gt;&#13;&#10;          {error &amp;&amp; (&#13;&#10;            &lt;div className=&quot;rounded-md bg-red-50 p-4 text-sm text-red-500 dark:bg-red-900/30 dark:text-red-200&quot;&gt;&#13;&#10;              {error}&#13;&#10;            &lt;/div&gt;&#13;&#10;          )}&#13;&#10;          &lt;div className=&quot;space-y-1&quot;&gt;&#13;&#10;            &lt;Label htmlFor=&quot;organization&quot;&gt;Organization Name&lt;/Label&gt;&#13;&#10;            &lt;Input&#13;&#10;              id=&quot;organization&quot;&#13;&#10;              placeholder=&quot;Your Agency Name&quot;&#13;&#10;              disabled={isLoading}&#13;&#10;              value={orgName}&#13;&#10;              onChange={(e) =&gt; setOrgName(e.target.value)}&#13;&#10;              required&#13;&#10;            /&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#13;&#10;            &lt;div className=&quot;space-y-1&quot;&gt;&#13;&#10;              &lt;Label htmlFor=&quot;firstName&quot;&gt;First Name&lt;/Label&gt;&#13;&#10;              &lt;Input&#13;&#10;                id=&quot;firstName&quot;&#13;&#10;                placeholder=&quot;John&quot;&#13;&#10;                disabled={isLoading}&#13;&#10;                value={firstName}&#13;&#10;                onChange={(e) =&gt; setFirstName(e.target.value)}&#13;&#10;                required&#13;&#10;              /&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div className=&quot;space-y-1&quot;&gt;&#13;&#10;              &lt;Label htmlFor=&quot;lastName&quot;&gt;Last Name&lt;/Label&gt;&#13;&#10;              &lt;Input&#13;&#10;                id=&quot;lastName&quot;&#13;&#10;                placeholder=&quot;Doe&quot;&#13;&#10;                disabled={isLoading}&#13;&#10;                value={lastName}&#13;&#10;                onChange={(e) =&gt; setLastName(e.target.value)}&#13;&#10;                required&#13;&#10;              /&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;div className=&quot;space-y-1&quot;&gt;&#13;&#10;            &lt;Label htmlFor=&quot;email&quot;&gt;Email&lt;/Label&gt;&#13;&#10;            &lt;Input&#13;&#10;              id=&quot;email&quot;&#13;&#10;              type=&quot;email&quot;&#13;&#10;              placeholder=&quot;name@example.com&quot;&#13;&#10;              autoCapitalize=&quot;none&quot;&#13;&#10;              autoComplete=&quot;email&quot;&#13;&#10;              autoCorrect=&quot;off&quot;&#13;&#10;              disabled={isLoading}&#13;&#10;              value={email}&#13;&#10;              onChange={(e) =&gt; setEmail(e.target.value)}&#13;&#10;              required&#13;&#10;            /&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;div className=&quot;space-y-1&quot;&gt;&#13;&#10;            &lt;Label htmlFor=&quot;password&quot;&gt;Password&lt;/Label&gt;&#13;&#10;            &lt;Input&#13;&#10;              id=&quot;password&quot;&#13;&#10;              type=&quot;password&quot;&#13;&#10;              autoCapitalize=&quot;none&quot;&#13;&#10;              autoComplete=&quot;new-password&quot;&#13;&#10;              autoCorrect=&quot;off&quot;&#13;&#10;              disabled={isLoading}&#13;&#10;              value={password}&#13;&#10;              onChange={(e) =&gt; setPassword(e.target.value)}&#13;&#10;              required&#13;&#10;            /&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;Button&#13;&#10;            className=&quot;w-full&quot;&#13;&#10;            type=&quot;submit&quot;&#13;&#10;            disabled={isLoading}&#13;&#10;          &gt;&#13;&#10;            {isLoading ? 'Creating account...' : 'Create Account'}&#13;&#10;          &lt;/Button&gt;&#13;&#10;        &lt;/form&gt;&#13;&#10;        &lt;div className=&quot;mt-4 text-center text-sm&quot;&gt;&#13;&#10;          Already have an account?{' '}&#13;&#10;          &lt;Link&#13;&#10;            href=&quot;/auth/login&quot;&#13;&#10;            className=&quot;text-primary hover:underline underline-offset-4&quot;&#13;&#10;          &gt;&#13;&#10;            Sign in&#13;&#10;          &lt;/Link&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/layout/MemberManagement.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/layout/MemberManagement.tsx" />
              <option name="originalContent" value="import { useOrganizationRole } from '@/hooks/useOrganizationRole';&#10;import { useSession } from '@supabase/auth-helpers-react';&#10;&#10;export function MemberManagement({ orgId }: { orgId: string }) {&#10;  const session = useSession();&#10;  const userId = session?.user?.id;&#10;  const { hasPermission, loading } = useOrganizationRole(orgId, userId);&#10;&#10;  if (loading) return &lt;div&gt;Loading...&lt;/div&gt;;&#10;  if (!hasPermission('manage_members')) {&#10;    return &lt;div&gt;You don't have permission to manage members.&lt;/div&gt;;&#10;  }&#10;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h2 className=&quot;text-lg font-bold mb-2&quot;&gt;Member Management&lt;/h2&gt;&#10;      {/* Add your InviteUserForm and MembersList components here */}&#10;      &lt;div&gt;Invite users, change roles, and remove members here.&lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { useState } from 'react';&#10;import { useSession } from '@supabase/auth-helpers-react';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { Select } from '@/components/ui/select';&#10;import { ORGANIZATION_ROLES } from '@/lib/roles';&#10;import { inviteUserToOrganization } from '@/lib/invitations';&#10;import { useOrganizationRole } from '@/hooks/useOrganizationRole';&#10;&#10;export function MemberManagement({ orgId }: { orgId: string }) {&#10;  const session = useSession();&#10;  const [email, setEmail] = useState('');&#10;  const [role, setRole] = useState('support_staff');&#10;  const [isLoading, setIsLoading] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const { hasPermission } = useOrganizationRole(orgId, session?.user?.id);&#10;&#10;  if (!hasPermission('manage_members')) {&#10;    return &lt;div&gt;You don't have permission to manage members.&lt;/div&gt;;&#10;  }&#10;&#10;  const handleInvite = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    setIsLoading(true);&#10;    setError(null);&#10;&#10;    try {&#10;      await inviteUserToOrganization({&#10;        orgId,&#10;        email,&#10;        role: role as keyof typeof ORGANIZATION_ROLES,&#10;        invitedBy: session?.user?.id as string&#10;      });&#10;      setEmail('');&#10;      // TODO: Show success message&#10;    } catch (err: any) {&#10;      setError(err.message);&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-4 p-4&quot;&gt;&#10;      &lt;h2 className=&quot;text-lg font-bold&quot;&gt;Member Management&lt;/h2&gt;&#10;      &#10;      &lt;form onSubmit={handleInvite} className=&quot;space-y-4&quot;&gt;&#10;        {error &amp;&amp; (&#10;          &lt;div className=&quot;text-red-500 text-sm&quot;&gt;{error}&lt;/div&gt;&#10;        )}&#10;        &#10;        &lt;div&gt;&#10;          &lt;label className=&quot;block text-sm font-medium mb-1&quot;&gt;&#10;            Email Address&#10;          &lt;/label&gt;&#10;          &lt;Input&#10;            type=&quot;email&quot;&#10;            value={email}&#10;            onChange={(e) =&gt; setEmail(e.target.value)}&#10;            placeholder=&quot;Enter email address&quot;&#10;            required&#10;          /&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div&gt;&#10;          &lt;label className=&quot;block text-sm font-medium mb-1&quot;&gt;&#10;            Role&#10;          &lt;/label&gt;&#10;          &lt;Select&#10;            value={role}&#10;            onValueChange={setRole}&#10;          &gt;&#10;            &lt;Select.Option value={ORGANIZATION_ROLES.DIRECTOR_ADMIN}&gt;&#10;              Director Admin&#10;            &lt;/Select.Option&gt;&#10;            &lt;Select.Option value={ORGANIZATION_ROLES.DIRECTOR}&gt;&#10;              Director&#10;            &lt;/Select.Option&gt;&#10;            &lt;Select.Option value={ORGANIZATION_ROLES.AGENT}&gt;&#10;              Agent&#10;            &lt;/Select.Option&gt;&#10;            &lt;Select.Option value={ORGANIZATION_ROLES.SUPPORT_STAFF}&gt;&#10;              Support Staff&#10;            &lt;/Select.Option&gt;&#10;          &lt;/Select&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;Button type=&quot;submit&quot; disabled={isLoading}&gt;&#10;          {isLoading ? 'Sending Invitation...' : 'Send Invitation'}&#10;        &lt;/Button&gt;&#10;      &lt;/form&gt;&#10;&#10;      {/* TODO: Add MembersList component here */}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/hooks/useOrganizationRole.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/hooks/useOrganizationRole.ts" />
              <option name="originalContent" value="import { useEffect, useState } from 'react';&#10;import { supabase } from '@/lib/supabase/client';&#10;import { ORGANIZATION_ROLES, ROLE_PERMISSIONS } from '@/lib/roles';&#10;&#10;export function useOrganizationRole(orgId: string, userId: string) {&#10;  const [role, setRole] = useState&lt;string | null&gt;(null);&#10;  const [permissions, setPermissions] = useState&lt;string[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;&#10;  useEffect(() =&gt; {&#10;    async function fetchRole() {&#10;      setLoading(true);&#10;      const { data, error } = await supabase&#10;        .from('org_members')&#10;        .select('role')&#10;        .eq('org_id', orgId)&#10;        .eq('user_id', userId)&#10;        .single();&#10;      if (data &amp;&amp; !error) {&#10;        setRole(data.role);&#10;        setPermissions(ROLE_PERMISSIONS[data.role] || []);&#10;      } else {&#10;        setRole(null);&#10;        setPermissions([]);&#10;      }&#10;      setLoading(false);&#10;    }&#10;    if (orgId &amp;&amp; userId) fetchRole();&#10;  }, [orgId, userId]);&#10;&#10;  const hasPermission = (permission: string) =&gt; permissions.includes(permission);&#10;&#10;  return { role, permissions, hasPermission, loading };&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import { useEffect, useState } from 'react';&#10;import { supabase } from '@/lib/supabase/client';&#10;import { ROLE_PERMISSIONS, Permission } from '@/lib/roles';&#10;&#10;export function useOrganizationRole(orgId?: string, userId?: string) {&#10;  const [role, setRole] = useState&lt;string | null&gt;(null);&#10;  const [permissions, setPermissions] = useState&lt;string[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;&#10;  useEffect(() =&gt; {&#10;    async function fetchRole() {&#10;      if (!orgId || !userId) {&#10;        setRole(null);&#10;        setPermissions([]);&#10;        setLoading(false);&#10;        return;&#10;      }&#10;&#10;      const { data, error } = await supabase&#10;        .from('org_members')&#10;        .select('role')&#10;        .eq('org_id', orgId)&#10;        .eq('user_id', userId)&#10;        .single();&#10;&#10;      if (data &amp;&amp; !error) {&#10;        setRole(data.role);&#10;        setPermissions(ROLE_PERMISSIONS[data.role as keyof typeof ROLE_PERMISSIONS] || []);&#10;      } else {&#10;        setRole(null);&#10;        setPermissions([]);&#10;      }&#10;      setLoading(false);&#10;    }&#10;&#10;    fetchRole();&#10;  }, [orgId, userId]);&#10;&#10;  const hasPermission = (permission: Permission) =&gt; {&#10;    return permissions.includes(permission);&#10;  };&#10;&#10;  return {&#10;    role,&#10;    permissions,&#10;    hasPermission,&#10;    loading,&#10;  };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/invitations.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/invitations.ts" />
              <option name="updatedContent" value="import { supabase } from './supabase/client';&#10;import { ORGANIZATION_ROLES, OrganizationRole } from './roles';&#10;&#10;export type InvitationData = {&#10;  orgId: string;&#10;  email: string;&#10;  role: OrganizationRole;&#10;  invitedBy: string;&#10;};&#10;&#10;export async function inviteUserToOrganization({&#10;  orgId,&#10;  email,&#10;  role,&#10;  invitedBy&#10;}: InvitationData) {&#10;  const token = crypto.randomUUID();&#10;  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 days&#10;&#10;  const { data, error } = await supabase&#10;    .from('organization_invitations')&#10;    .insert({&#10;      org_id: orgId,&#10;      email,&#10;      role,&#10;      invited_by: invitedBy,&#10;      token,&#10;      expires_at: expiresAt.toISOString()&#10;    })&#10;    .select()&#10;    .single();&#10;&#10;  if (error) throw error;&#10;  return data;&#10;}&#10;&#10;export async function getInvitation(token: string) {&#10;  const { data, error } = await supabase&#10;    .from('organization_invitations')&#10;    .select('*, organizations(*)')&#10;    .eq('token', token)&#10;    .is('accepted_at', null)&#10;    .gt('expires_at', new Date().toISOString())&#10;    .single();&#10;&#10;  if (error) throw error;&#10;  return data;&#10;}&#10;&#10;export async function acceptInvitation(token: string, userId: string) {&#10;  const invitation = await getInvitation(token);&#10;  if (!invitation) throw new Error('Invalid or expired invitation');&#10;&#10;  const { error: memberError } = await supabase&#10;    .from('org_members')&#10;    .insert({&#10;      org_id: invitation.org_id,&#10;      user_id: userId,&#10;      role: invitation.role,&#10;      invited_by: invitation.invited_by,&#10;      invited_at: invitation.created_at,&#10;      joined_at: new Date().toISOString()&#10;    });&#10;&#10;  if (memberError) throw memberError;&#10;&#10;  const { error: updateError } = await supabase&#10;    .from('organization_invitations')&#10;    .update({ accepted_at: new Date().toISOString() })&#10;    .eq('id', invitation.id);&#10;&#10;  if (updateError) throw updateError;&#10;  return invitation;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/roles.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/roles.ts" />
              <option name="updatedContent" value="export const ORGANIZATION_ROLES = {&#10;  OWNER: 'owner',&#10;  DIRECTOR_ADMIN: 'director_admin',&#10;  DIRECTOR: 'director',&#10;  AGENT: 'agent',&#10;  SUPPORT_STAFF: 'support_staff',&#10;} as const;&#10;&#10;export type OrganizationRole = keyof typeof ORGANIZATION_ROLES;&#10;&#10;export const ROLE_PERMISSIONS = {&#10;  [ORGANIZATION_ROLES.OWNER]: [&#10;    'manage_organization',&#10;    'manage_members',&#10;    'manage_athletes',&#10;    'manage_contracts',&#10;    'view_all',&#10;    'delete_organization',&#10;    'invite_members',&#10;  ],&#10;  [ORGANIZATION_ROLES.DIRECTOR_ADMIN]: [&#10;    'manage_members',&#10;    'manage_athletes',&#10;    'manage_contracts',&#10;    'view_all',&#10;    'invite_members',&#10;  ],&#10;  [ORGANIZATION_ROLES.DIRECTOR]: [&#10;    'manage_athletes',&#10;    'manage_contracts',&#10;    'view_athletes',&#10;  ],&#10;  [ORGANIZATION_ROLES.AGENT]: [&#10;    'view_athletes',&#10;    'manage_contracts',&#10;  ],&#10;  [ORGANIZATION_ROLES.SUPPORT_STAFF]: [&#10;    'view_limited',&#10;  ],&#10;} as const;&#10;&#10;export type Permission = typeof ROLE_PERMISSIONS[OrganizationRole][number];&#10;&#10;export function hasPermission(role: string, permission: Permission): boolean {&#10;  return ROLE_PERMISSIONS[role as OrganizationRole]?.includes(permission) ?? false;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/middleware.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/middleware.ts" />
              <option name="originalContent" value="import { createServerClient } from '@supabase/ssr';&#10;import { NextResponse } from 'next/server';&#10;import type { NextRequest } from 'next/server';&#10;import { Database } from '@/types/supabase';&#10;&#10;export async function middleware(req: NextRequest) {&#10;  const res = NextResponse.next();&#10;&#10;  // Create a Supabase client configured to use cookies&#10;  const supabase = createServerClient&lt;Database&gt;(&#10;    process.env.NEXT_PUBLIC_SUPABASE_URL!,&#10;    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,&#10;    {&#10;      cookies: {&#10;        get(name: string) {&#10;          return req.cookies.get(name)?.value;&#10;        },&#10;        set(name: string, value: string, options: any) {&#10;          res.cookies.set({ name, value, ...options });&#10;        },&#10;        remove(name: string, options: any) {&#10;          res.cookies.set({ name, value: '', ...options });&#10;        },&#10;      },&#10;    }&#10;  );&#10;&#10;  const {&#10;    data: { session },&#10;  } = await supabase.auth.getSession();&#10;&#10;  // If we're on a protected route and not logged in, redirect to login&#10;  if (!session &amp;&amp; req.nextUrl.pathname.startsWith('/dashboard')) {&#10;    const redirectUrl = new URL('/auth/login', req.url);&#10;    redirectUrl.searchParams.set('redirectedFrom', req.nextUrl.pathname);&#10;    return NextResponse.redirect(redirectUrl);&#10;  }&#10;&#10;  // If we're on an auth route and logged in, redirect to dashboard&#10;  if (session &amp;&amp; (&#10;    req.nextUrl.pathname.startsWith('/auth/login') || &#10;    req.nextUrl.pathname.startsWith('/auth/register')&#10;  )) {&#10;    return NextResponse.redirect(new URL('/dashboard', req.url));&#10;  }&#10;&#10;  return res;&#10;}&#10;&#10;export const config = {&#10;  matcher: [&#10;    '/dashboard/:path*',&#10;    '/auth/login',&#10;    '/auth/register',&#10;  ],&#10;};&#10;" />
              <option name="updatedContent" value="import { createServerClient } from '@supabase/ssr';&#13;&#10;import { NextResponse } from 'next/server';&#13;&#10;import type { NextRequest } from 'next/server';&#13;&#10;import { Database } from '@/types/supabase';&#13;&#10;&#13;&#10;export async function middleware(req: NextRequest) {&#13;&#10;  const res = NextResponse.next();&#13;&#10;&#13;&#10;  // Create a Supabase client configured to use cookies&#13;&#10;  const supabase = createServerClient&lt;Database&gt;(&#13;&#10;    process.env.NEXT_PUBLIC_SUPABASE_URL!,&#13;&#10;    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,&#13;&#10;    {&#13;&#10;      cookies: {&#13;&#10;        get(name: string) {&#13;&#10;          return req.cookies.get(name)?.value;&#13;&#10;        },&#13;&#10;        set(name: string, value: string, options: any) {&#13;&#10;          res.cookies.set({ name, value, ...options });&#13;&#10;        },&#13;&#10;        remove(name: string, options: any) {&#13;&#10;          res.cookies.set({ name, value: '', ...options });&#13;&#10;        },&#13;&#10;      },&#13;&#10;    }&#13;&#10;  );&#13;&#10;&#13;&#10;  const {&#13;&#10;    data: { session },&#13;&#10;  } = await supabase.auth.getSession();&#13;&#10;&#13;&#10;  // If we're on a protected route and not logged in, redirect to login&#13;&#10;  if (!session &amp;&amp; req.nextUrl.pathname.startsWith('/dashboard')) {&#13;&#10;    const redirectUrl = new URL('/auth/login', req.url);&#13;&#10;    redirectUrl.searchParams.set('redirectedFrom', req.nextUrl.pathname);&#13;&#10;    return NextResponse.redirect(redirectUrl);&#13;&#10;  }&#13;&#10;&#13;&#10;  // If we're on an auth route and logged in, redirect to dashboard&#13;&#10;  if (session &amp;&amp; (&#13;&#10;    req.nextUrl.pathname.startsWith('/auth/login') || &#13;&#10;    req.nextUrl.pathname.startsWith('/auth/register')&#13;&#10;  )) {&#13;&#10;    return NextResponse.redirect(new URL('/dashboard', req.url));&#13;&#10;  }&#13;&#10;&#13;&#10;  // Role-based access control for dashboard routes&#13;&#10;  if (session &amp;&amp; req.nextUrl.pathname.startsWith('/dashboard')) {&#13;&#10;    // Example: extract org_id from query or session (customize as needed)&#13;&#10;    const orgId = req.nextUrl.searchParams.get('org') || session.user.org_id;&#13;&#10;    if (orgId) {&#13;&#10;      // Fetch org_membership for this user&#13;&#10;      const { data: orgMember, error: orgMemberError } = await supabase&#13;&#10;        .from('org_members')&#13;&#10;        .select('role')&#13;&#10;        .eq('org_id', orgId)&#13;&#10;        .eq('user_id', session.user.id)&#13;&#10;        .single();&#13;&#10;      if (!orgMember || orgMemberError) {&#13;&#10;        // Not a member of this org, redirect to dashboard home&#13;&#10;        return NextResponse.redirect(new URL('/dashboard', req.url));&#13;&#10;      }&#13;&#10;      // Example: restrict access to athlete edit page to certain roles&#13;&#10;      if (&#13;&#10;        req.nextUrl.pathname.includes('/athletes/') &amp;&amp;&#13;&#10;        req.nextUrl.pathname.includes('/edit') &amp;&amp;&#13;&#10;        !['owner', 'director_admin', 'director'].includes(orgMember.role)&#13;&#10;      ) {&#13;&#10;        // Insufficient permission&#13;&#10;        return NextResponse.redirect(new URL('/dashboard', req.url));&#13;&#10;      }&#13;&#10;      // Add more route/role checks as needed&#13;&#10;    }&#13;&#10;  }&#13;&#10;&#13;&#10;  return res;&#13;&#10;}&#13;&#10;&#13;&#10;export const config = {&#13;&#10;  matcher: [&#13;&#10;    '/dashboard/:path*',&#13;&#10;    '/auth/login',&#13;&#10;    '/auth/register',&#13;&#10;  ],&#13;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/types/athlete.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/types/athlete.ts" />
              <option name="originalContent" value="import { Tables } from './supabase';&#10;&#10;export const PROFESSIONAL_DEVELOPMENT_CATEGORIES = [&#10;  &quot;Emotional Intelligence Training&quot;,&#10;  &quot;Mental Resilience Training&quot;,&#10;  &quot;Biomechanical Testing&quot;,&#10;  &quot;Neurocognitive Training&quot;,&#10;  &quot;Media Training&quot;,&#10;  &quot;Interview Preparation&quot;,&#10;  &quot;Financial Literacy&quot;,&#10;  &quot;Personal Branding&quot;,&#10;  &quot;Leadership Development&quot;,&#10;  &quot;Nutrition Education&quot;&#10;];&#10;&#10;// Type for the Athlete from the database&#10;export type Athlete = Tables&lt;'athletes'&gt; &amp; {&#10;  events?: any[];&#10;  brand_partnerships?: {&#10;    id: string;&#10;    date: string;&#10;    company: string;&#10;    details: string;&#10;    monetary_value?: number;&#10;    inkind_value?: number;&#10;    obligations?: string;&#10;    status: 'active' | 'completed' | 'pending' | 'canceled';&#10;  }[];&#10;  professional_development?: {&#10;    id: string;&#10;    category: string;&#10;    date: string;&#10;    notes?: string;&#10;  }[];&#10;  medical_history?: {&#10;    id: string;&#10;    date: string;&#10;    injury: string;&#10;    timetable?: string;&#10;    rehab?: string;&#10;    doctors_seen?: string[];&#10;    status: 'active' | 'rehabbing' | 'cleared';&#10;    notes?: string;&#10;    severity?: 'minor' | 'moderate' | 'severe';&#10;    treatment_type?: string;&#10;  }[];&#10;  communications_log?: {&#10;    id: string;&#10;    date: string;&#10;    contacted_by: string;&#10;    mode: 'phone' | 'text' | 'email' | 'in-person' | 'other';&#10;    subject?: string;&#10;    details: string;&#10;    action_items?: { description: string; status: 'open' | 'in-progress' | 'done'; due_date?: string }[];&#10;    outcome?: string;&#10;    follow_up_date?: string;&#10;  }[];&#10;};&#10;&#10;// NIL Tier options&#10;export const NIL_TIERS = ['Elite', 'Premium', 'Standard', 'Developing', 'Prospect'] as const;&#10;export type NilTier = typeof NIL_TIERS[number];&#10;// Football positions&#10;export const POSITIONS = [&#10;  // Offense&#10;  'QB', 'RB', 'FB', 'WR', 'TE', 'OT', 'OG', 'C',&#10;  // Defense&#10;  'DE', 'DT', 'NT', 'LB', 'OLB', 'MLB', 'ILB', 'CB', 'FS', 'SS',&#10;  // Special Teams&#10;  'K', 'P', 'LS'&#10;] as const;&#10;export type Position = typeof POSITIONS[number];&#10;&#10;// College grade levels&#10;export const GRADES = ['Freshman', 'Sophomore', 'Junior', 'Senior', '5th Year'] as const;&#10;export type Grade = typeof GRADES[number];&#10;&#10;// Filter options for athletes&#10;export interface AthleteFilters {&#10;  search?: string;&#10;  position?: Position | '';&#10;  nilTier?: NilTier | '';&#10;  currentGrade?: Grade | '';&#10;  sortBy?: 'name' | 'position' | 'nilValue' | 'totalContractValue';&#10;  sortDirection?: 'asc' | 'desc';&#10;  professional_development?: ProfessionalDevelopmentActivity[] | null;&#10;}&#10;&#10;export interface ProfessionalDevelopmentActivity {&#10;  id?: string;&#10;  category: string;&#10;  date: string;&#10;  notes?: string | null;&#10;}&#10;&#10;export interface BrandPartnership {&#10;  id: string;&#10;  date: string;&#10;  company: string;&#10;  details: string;&#10;  monetary_value?: number | null;&#10;  inkind_value?: number | null;&#10;  obligations?: string | null;&#10;  status: 'active' | 'completed' | 'pending' | 'canceled';&#10;}&#10;&#10;export interface CommunicationLogEntry {&#10;  id?: string;&#10;  date: string; // ISO string&#10;  athlete_name: string;&#10;  contacted_by: string;&#10;  mode: 'phone' | 'text' | 'email' | 'in-person' | 'other';&#10;  subject?: string;&#10;  details: string;&#10;  action_items?: { description: string; status: 'open' | 'in-progress' | 'done'; due_date?: string }[];&#10;  outcome?: string;&#10;  follow_up_date?: string;&#10;}&#10;&#10;export interface MedicalRecord {&#10;  id?: string;&#10;  date: string; // ISO string&#10;  injury: string;&#10;  timetable?: string;&#10;  rehab?: string;&#10;  doctors_seen?: string[];&#10;  status: 'active' | 'rehabbing' | 'cleared';&#10;  notes?: string;&#10;  severity?: 'minor' | 'moderate' | 'severe';&#10;  treatment_type?: string;&#10;}&#10;" />
              <option name="updatedContent" value="import { Tables } from './supabase';&#10;&#10;export const PROFESSIONAL_DEVELOPMENT_CATEGORIES = [&#10;  &quot;Emotional Intelligence Training&quot;,&#10;  &quot;Mental Resilience Training&quot;,&#10;  &quot;Biomechanical Testing&quot;,&#10;  &quot;Neurocognitive Training&quot;,&#10;  &quot;Media Training&quot;,&#10;  &quot;Interview Preparation&quot;,&#10;  &quot;Financial Literacy&quot;,&#10;  &quot;Personal Branding&quot;,&#10;  &quot;Leadership Development&quot;,&#10;  &quot;Nutrition Education&quot;&#10;];&#10;&#10;// Type for the Athlete from the database&#10;export type Athlete = Tables&lt;'athletes'&gt; &amp; {&#10;  events?: any[];&#10;  revenue_sharing?: {&#10;    school_tier?: string;&#10;    value?: number;&#10;    total_value?: number;&#10;  };&#10;  brand_partnerships?: {&#10;    id: string;&#10;    date: string;&#10;    company: string;&#10;    details: string;&#10;    monetary_value?: number;&#10;    inkind_value?: number;&#10;    obligations?: string;&#10;    status: 'active' | 'completed' | 'pending' | 'canceled';&#10;  }[];&#10;  professional_development?: {&#10;    id: string;&#10;    category: string;&#10;    date: string;&#10;    notes?: string;&#10;  }[];&#10;  medical_history?: {&#10;    id: string;&#10;    date: string;&#10;    injury: string;&#10;    timetable?: string;&#10;    rehab?: string;&#10;    doctors_seen?: string[];&#10;    status: 'active' | 'rehabbing' | 'cleared';&#10;    notes?: string;&#10;    severity?: 'minor' | 'moderate' | 'severe';&#10;    treatment_type?: string;&#10;  }[];&#10;  communications_log?: {&#10;    id: string;&#10;    date: string;&#10;    contacted_by: string;&#10;    mode: 'phone' | 'text' | 'email' | 'in-person' | 'other';&#10;    subject?: string;&#10;    details: string;&#10;    action_items?: { description: string; status: 'open' | 'in-progress' | 'done'; due_date?: string }[];&#10;    outcome?: string;&#10;    follow_up_date?: string;&#10;  }[];&#10;};&#10;&#10;// NIL Tier options&#10;export const NIL_TIERS = ['Elite', 'Premium', 'Standard', 'Developing', 'Prospect'] as const;&#10;export type NilTier = typeof NIL_TIERS[number];&#10;// Football positions&#10;export const POSITIONS = [&#10;  // Offense&#10;  'QB', 'RB', 'FB', 'WR', 'TE', 'OT', 'OG', 'C',&#10;  // Defense&#10;  'DE', 'DT', 'NT', 'LB', 'OLB', 'MLB', 'ILB', 'CB', 'FS', 'SS',&#10;  // Special Teams&#10;  'K', 'P', 'LS'&#10;] as const;&#10;export type Position = typeof POSITIONS[number];&#10;&#10;// College grade levels&#10;export const GRADES = ['Freshman', 'Sophomore', 'Junior', 'Senior', '5th Year'] as const;&#10;export type Grade = typeof GRADES[number];&#10;&#10;// Filter options for athletes&#10;export interface AthleteFilters {&#10;  search?: string;&#10;  position?: Position | '';&#10;  nilTier?: NilTier | '';&#10;  currentGrade?: Grade | '';&#10;  sortBy?: 'name' | 'position' | 'nilValue' | 'totalContractValue';&#10;  sortDirection?: 'asc' | 'desc';&#10;  professional_development?: ProfessionalDevelopmentActivity[] | null;&#10;}&#10;&#10;export interface ProfessionalDevelopmentActivity {&#10;  id?: string;&#10;  category: string;&#10;  date: string;&#10;  notes?: string | null;&#10;}&#10;&#10;export interface BrandPartnership {&#10;  id: string;&#10;  date: string;&#10;  company: string;&#10;  details: string;&#10;  monetary_value?: number | null;&#10;  inkind_value?: number | null;&#10;  obligations?: string | null;&#10;  status: 'active' | 'completed' | 'pending' | 'canceled';&#10;}&#10;&#10;export interface CommunicationLogEntry {&#10;  id?: string;&#10;  date: string; // ISO string&#10;  athlete_name: string;&#10;  contacted_by: string;&#10;  mode: 'phone' | 'text' | 'email' | 'in-person' | 'other';&#10;  subject?: string;&#10;  details: string;&#10;  action_items?: { description: string; status: 'open' | 'in-progress' | 'done'; due_date?: string }[];&#10;  outcome?: string;&#10;  follow_up_date?: string;&#10;}&#10;&#10;export interface MedicalRecord {&#10;  id?: string;&#10;  date: string; // ISO string&#10;  injury: string;&#10;  timetable?: string;&#10;  rehab?: string;&#10;  doctors_seen?: string[];&#10;  status: 'active' | 'rehabbing' | 'cleared';&#10;  notes?: string;&#10;  severity?: 'minor' | 'moderate' | 'severe';&#10;  treatment_type?: string;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>